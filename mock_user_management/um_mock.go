// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influenzanet/api/dist/go/user-management (interfaces: UserManagementApiClient)

// Package mock_user_management is a generated GoMock package.
package mock_user_management

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	go0 "github.com/influenzanet/api/dist/go"
	user_management "github.com/influenzanet/api/dist/go/user-management"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockUserManagementApiClient is a mock of UserManagementApiClient interface
type MockUserManagementApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagementApiClientMockRecorder
}

// MockUserManagementApiClientMockRecorder is the mock recorder for MockUserManagementApiClient
type MockUserManagementApiClientMockRecorder struct {
	mock *MockUserManagementApiClient
}

// NewMockUserManagementApiClient creates a new mock instance
func NewMockUserManagementApiClient(ctrl *gomock.Controller) *MockUserManagementApiClient {
	mock := &MockUserManagementApiClient{ctrl: ctrl}
	mock.recorder = &MockUserManagementApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserManagementApiClient) EXPECT() *MockUserManagementApiClientMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method
func (m *MockUserManagementApiClient) ChangePassword(arg0 context.Context, arg1 *user_management.PasswordChangeMsg, arg2 ...grpc.CallOption) (*go0.Status, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangePassword", varargs...)
	ret0, _ := ret[0].(*go0.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockUserManagementApiClientMockRecorder) ChangePassword(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserManagementApiClient)(nil).ChangePassword), varargs...)
}

// LoginWithEmail mocks base method
func (m *MockUserManagementApiClient) LoginWithEmail(arg0 context.Context, arg1 *go0.UserCredentials, arg2 ...grpc.CallOption) (*user_management.UserAuthInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginWithEmail", varargs...)
	ret0, _ := ret[0].(*user_management.UserAuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithEmail indicates an expected call of LoginWithEmail
func (mr *MockUserManagementApiClientMockRecorder) LoginWithEmail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithEmail", reflect.TypeOf((*MockUserManagementApiClient)(nil).LoginWithEmail), varargs...)
}

// SignupWithEmail mocks base method
func (m *MockUserManagementApiClient) SignupWithEmail(arg0 context.Context, arg1 *user_management.NewUser, arg2 ...grpc.CallOption) (*user_management.UserAuthInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignupWithEmail", varargs...)
	ret0, _ := ret[0].(*user_management.UserAuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupWithEmail indicates an expected call of SignupWithEmail
func (mr *MockUserManagementApiClientMockRecorder) SignupWithEmail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupWithEmail", reflect.TypeOf((*MockUserManagementApiClient)(nil).SignupWithEmail), varargs...)
}

// Status mocks base method
func (m *MockUserManagementApiClient) Status(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (*go0.Status, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*go0.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockUserManagementApiClientMockRecorder) Status(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockUserManagementApiClient)(nil).Status), varargs...)
}
