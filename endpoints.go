package main

import (
	"bytes"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
)

type userCredentials struct {
	Email    string `json:"email" binding:"required"`
	Password string `json:"password" binding:"required"`
}

type tokenMessage struct {
	Token string `json:"token"`
}

func loginParticipantHandl(context *gin.Context) {
	var creds userCredentials
	if err := context.ShouldBindJSON(&creds); err != nil {
		context.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	body, err := context.GetRawData()
	// TODO: check credentials
	log.Println(creds)
	resp, err := http.Post(userManagementServer+"/login", "application/json", bytes.NewBuffer(body))

	if err != nil {
		log.Println(err)
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	defer resp.Body.Close()
	respBody, err := ioutil.ReadAll(resp.Body)
	log.Println(string(respBody))

	userID := uint(1)

	// generate token
	token, err := generateNewToken(userID, "participant")
	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	// Send response
	tokenResp := tokenMessage{
		Token: token,
	}
	context.JSON(http.StatusOK, tokenResp)
}

func loginResearcherHandl(context *gin.Context) {
	context.JSON(http.StatusNotImplemented, gin.H{"error": "not implemented"})
}

func loginAdminHandl(context *gin.Context) {
	context.JSON(http.StatusNotImplemented, gin.H{"error": "not implemented"})
}

func signupParticipantHandl(context *gin.Context) {
	context.JSON(http.StatusNotImplemented, gin.H{"error": "not implemented"})
}

func signupResearcherHandl(context *gin.Context) {
	context.JSON(http.StatusNotImplemented, gin.H{"error": "not implemented"})
}

func signupAdminHandl(context *gin.Context) {
	context.JSON(http.StatusNotImplemented, gin.H{"error": "not implemented"})
}

func validateTokenHandl(context *gin.Context) {
	req := context.Request

	// Get token string from url or header field
	var token string
	tokens, ok := req.Header["Authorization"]
	if ok && len(tokens) >= 1 {
		token = tokens[0]
		token = strings.TrimPrefix(token, "Bearer ")
	} else if len(req.FormValue("token")) > 0 {
		token = req.FormValue("token")
	} else {
		context.JSON(http.StatusBadRequest, gin.H{"error": "no Authorization token found"})
		return
	}

	// Parse and validate token
	parsedToken, ok, oldKey, err := validateToken(token)
	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	if !ok {
		context.JSON(http.StatusUnauthorized, gin.H{"error": "token not valid"})
		return
	}
	// TODO: what to do when token is generated by old key
	log.Println(oldKey)

	context.JSON(http.StatusOK, parsedToken)
}

func renewTokenHandl(context *gin.Context) {
	req := context.Request

	// Get token string from url or header field
	var token string
	tokens, ok := req.Header["Authorization"]
	if ok && len(tokens) >= 1 {
		token = tokens[0]
		token = strings.TrimPrefix(token, "Bearer ")
	} else if len(req.FormValue("token")) > 0 {
		token = req.FormValue("token")
	} else {
		context.JSON(http.StatusBadRequest, gin.H{"error": "no Authorization token found"})
		return
	}

	// Parse and validate token
	parsedToken, ok, _, err := validateToken(token)
	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	if !ok {
		context.JSON(http.StatusUnauthorized, gin.H{"error": "token not valid"})
		return
	}

	// Check for too frequent requests:
	if time.Now().Unix() < time.Unix(parsedToken.StandardClaims.IssuedAt, 0).Add(minTokenAge).Unix() {
		context.JSON(http.StatusTeapot, gin.H{"error": "can't renew token so often"})
		return
	}

	// Generate new token:
	newToken, err := generateNewToken(parsedToken.UserID, parsedToken.Role)
	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	// Send response
	tokenResp := tokenMessage{
		Token: newToken,
	}
	context.JSON(http.StatusOK, tokenResp)
}
