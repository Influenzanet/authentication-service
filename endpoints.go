package main

import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/golang/protobuf/ptypes/empty"

	influenzanet "github.com/Influenzanet/api/dist/go"
	auth_api "github.com/Influenzanet/api/dist/go/auth-service"
)

func checkTokenAgeMaturity(issuedAt int64) bool {
	return time.Now().Unix() < time.Unix(issuedAt, 0).Add(minTokenAge).Unix()
}

func (s *authServiceServer) Status(ctx context.Context, _ *empty.Empty) (*influenzanet.Status, error) {
	return nil, errors.New("not implemented")
}

func (s *authServiceServer) LoginWithEmail(ctx context.Context, req *influenzanet.UserCredentials) (*auth_api.EncodedToken, error) {
	if req == nil {
		return nil, errors.New("invalid username and/or password")
	}
	resp, err := userManagementClient.LoginWithEmail(context.Background(), req)
	if err != nil {
		log.Printf("error during login with email: %s", err.Error())
		return nil, errors.New("invalid username and/or password")
	}

	token, err := generateNewToken(resp.UserId, resp.Roles, resp.InstanceId)
	if err != nil {
		return nil, err
	}

	return &auth_api.EncodedToken{
		Token: token,
	}, nil
}

func (s *authServiceServer) SignupWithEmail(ctx context.Context, req *influenzanet.UserCredentials) (*auth_api.EncodedToken, error) {
	return nil, errors.New("not implemented")
}

/*
func signupHandl(context *gin.Context) {
	var creds userCredentials

	if err := context.ShouldBindJSON(&creds); err != nil {
		context.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	payload, err := json.Marshal(creds)

	resp, err := http.Post(userManagementServer+"/signup", "application/json", bytes.NewBuffer(payload))
	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusCreated {
		respBody, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
			return
		}
		currentError := errorResponse{}
		if jsonErr := json.Unmarshal(respBody, &currentError); jsonErr != nil {
			context.JSON(http.StatusInternalServerError, gin.H{"error": jsonErr.Error()})
			return
		}

		context.JSON(resp.StatusCode, currentError)
		return
	}

	respBody, err := ioutil.ReadAll(resp.Body)
	currentUser := userSignupResponse{}
	jsonErr := json.Unmarshal(respBody, &currentUser)
	if jsonErr != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	token, err := generateNewToken(currentUser.ID, currentUser.Roles, currentUser.AuthenticatedRole)
	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	// Send response
	tokenResp := tokenMessage{
		Token:             token,
		Roles:             currentUser.Roles,
		AuthenticatedRole: currentUser.AuthenticatedRole,
	}
	context.JSON(http.StatusCreated, tokenResp)
}
*/

func (s *authServiceServer) ValidateJWT(ctx context.Context, req *auth_api.EncodedToken) (*influenzanet.ParsedToken, error) {
	return nil, errors.New("not implemented")
}

/*
func ValidateJWT(context *gin.Context) {
	token := context.MustGet("encodedToken").(string)

	// Parse and validate token
	parsedToken, ok, oldKey, err := validateToken(token)
	if err != nil {
		context.JSON(http.StatusUnauthorized, gin.H{"error": "token not valid", "reason": err.Error()})
		return
	}
	if !ok {
		context.JSON(http.StatusUnauthorized, gin.H{"error": "token not valid", "reason": "wrong signiture"})
		return
	}

	// TODO: what to do when token is generated by old key
	if oldKey {
		log.Println(oldKey)
	}

	context.JSON(http.StatusOK, gin.H{"token": parsedToken})
}
*/

func (s *authServiceServer) RenewJWT(ctx context.Context, req *auth_api.EncodedToken) (*auth_api.EncodedToken, error) {
	return nil, errors.New("not implemented")
}

/*
func renewTokenHandl(context *gin.Context) {
	token := context.MustGet("encodedToken").(string)

	// Parse and validate token
	parsedToken, ok, _, err := validateToken(token)
	if err != nil {
		context.JSON(http.StatusUnauthorized, gin.H{"error": "token not valid", "reason": err.Error()})
		return
	}
	if !ok {
		context.JSON(http.StatusUnauthorized, gin.H{"error": "token not valid", "reason": "wrong signiture"})
		return
	}

	// Check for too frequent requests:
	if checkTokenAgeMaturity(parsedToken.StandardClaims.IssuedAt) {
		context.JSON(http.StatusTeapot, gin.H{"error": "can't renew token so often"})
		return
	}

	// Generate new token:
	newToken, err := generateNewToken(parsedToken.UserID, parsedToken.Roles, parsedToken.AuthenticatedRole)
	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	// Send response
	tokenResp := tokenMessage{
		Token: newToken,
	}
	context.JSON(http.StatusOK, tokenResp)
}
*/
