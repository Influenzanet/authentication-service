// Code generated by protoc-gen-go. DO NOT EDIT.
// source: expression.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Expression struct {
	Name                 string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReturnType           string           `protobuf:"bytes,2,opt,name=returnType,proto3" json:"returnType,omitempty"`
	Data                 []*ExpressionArg `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Expression) Reset()         { *m = Expression{} }
func (m *Expression) String() string { return proto.CompactTextString(m) }
func (*Expression) ProtoMessage()    {}
func (*Expression) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc7550768b3bd34, []int{0}
}

func (m *Expression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Expression.Unmarshal(m, b)
}
func (m *Expression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Expression.Marshal(b, m, deterministic)
}
func (m *Expression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expression.Merge(m, src)
}
func (m *Expression) XXX_Size() int {
	return xxx_messageInfo_Expression.Size(m)
}
func (m *Expression) XXX_DiscardUnknown() {
	xxx_messageInfo_Expression.DiscardUnknown(m)
}

var xxx_messageInfo_Expression proto.InternalMessageInfo

func (m *Expression) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Expression) GetReturnType() string {
	if m != nil {
		return m.ReturnType
	}
	return ""
}

func (m *Expression) GetData() []*ExpressionArg {
	if m != nil {
		return m.Data
	}
	return nil
}

type ExpressionArg struct {
	Dtype string `protobuf:"bytes,1,opt,name=dtype,proto3" json:"dtype,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*ExpressionArg_Exp
	//	*ExpressionArg_Str
	//	*ExpressionArg_Num
	Data                 isExpressionArg_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ExpressionArg) Reset()         { *m = ExpressionArg{} }
func (m *ExpressionArg) String() string { return proto.CompactTextString(m) }
func (*ExpressionArg) ProtoMessage()    {}
func (*ExpressionArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc7550768b3bd34, []int{1}
}

func (m *ExpressionArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionArg.Unmarshal(m, b)
}
func (m *ExpressionArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionArg.Marshal(b, m, deterministic)
}
func (m *ExpressionArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionArg.Merge(m, src)
}
func (m *ExpressionArg) XXX_Size() int {
	return xxx_messageInfo_ExpressionArg.Size(m)
}
func (m *ExpressionArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionArg.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionArg proto.InternalMessageInfo

func (m *ExpressionArg) GetDtype() string {
	if m != nil {
		return m.Dtype
	}
	return ""
}

type isExpressionArg_Data interface {
	isExpressionArg_Data()
}

type ExpressionArg_Exp struct {
	Exp *Expression `protobuf:"bytes,2,opt,name=exp,proto3,oneof"`
}

type ExpressionArg_Str struct {
	Str string `protobuf:"bytes,3,opt,name=str,proto3,oneof"`
}

type ExpressionArg_Num struct {
	Num float64 `protobuf:"fixed64,4,opt,name=num,proto3,oneof"`
}

func (*ExpressionArg_Exp) isExpressionArg_Data() {}

func (*ExpressionArg_Str) isExpressionArg_Data() {}

func (*ExpressionArg_Num) isExpressionArg_Data() {}

func (m *ExpressionArg) GetData() isExpressionArg_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ExpressionArg) GetExp() *Expression {
	if x, ok := m.GetData().(*ExpressionArg_Exp); ok {
		return x.Exp
	}
	return nil
}

func (m *ExpressionArg) GetStr() string {
	if x, ok := m.GetData().(*ExpressionArg_Str); ok {
		return x.Str
	}
	return ""
}

func (m *ExpressionArg) GetNum() float64 {
	if x, ok := m.GetData().(*ExpressionArg_Num); ok {
		return x.Num
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExpressionArg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExpressionArg_Exp)(nil),
		(*ExpressionArg_Str)(nil),
		(*ExpressionArg_Num)(nil),
	}
}

func init() {
	proto.RegisterType((*Expression)(nil), "inf.expressions.Expression")
	proto.RegisterType((*ExpressionArg)(nil), "inf.expressions.ExpressionArg")
}

func init() {
	proto.RegisterFile("expression.proto", fileDescriptor_fcc7550768b3bd34)
}

var fileDescriptor_fcc7550768b3bd34 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xad, 0x28, 0x28,
	0x4a, 0x2d, 0x2e, 0xce, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcf, 0xcc,
	0x4b, 0xd3, 0x43, 0x88, 0x16, 0x2b, 0x95, 0x70, 0x71, 0xb9, 0xc2, 0xb9, 0x42, 0x42, 0x5c, 0x2c,
	0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x90, 0x1c, 0x17,
	0x57, 0x51, 0x6a, 0x49, 0x69, 0x51, 0x5e, 0x48, 0x65, 0x41, 0xaa, 0x04, 0x13, 0x58, 0x06, 0x49,
	0x44, 0xc8, 0x88, 0x8b, 0x25, 0x25, 0xb1, 0x24, 0x51, 0x82, 0x59, 0x81, 0x59, 0x83, 0xdb, 0x48,
	0x4e, 0x0f, 0xcd, 0x06, 0x3d, 0x84, 0xf1, 0x8e, 0x45, 0xe9, 0x41, 0x60, 0xb5, 0x4a, 0x6d, 0x8c,
	0x5c, 0xbc, 0x28, 0xe2, 0x42, 0x22, 0x5c, 0xac, 0x29, 0x25, 0x20, 0x0b, 0x20, 0x56, 0x43, 0x38,
	0x42, 0xfa, 0x5c, 0xcc, 0xa9, 0x15, 0x05, 0x60, 0x4b, 0xb9, 0x8d, 0xa4, 0xf1, 0x18, 0xed, 0xc1,
	0x10, 0x04, 0x52, 0x29, 0x24, 0xc4, 0xc5, 0x5c, 0x5c, 0x52, 0x24, 0xc1, 0x0c, 0x32, 0x04, 0x24,
	0x56, 0x5c, 0x52, 0x04, 0x12, 0xcb, 0x2b, 0xcd, 0x95, 0x60, 0x51, 0x60, 0xd4, 0x60, 0x04, 0x89,
	0xe5, 0x95, 0xe6, 0x3a, 0xb1, 0x41, 0x1c, 0xed, 0xc4, 0x1a, 0xc5, 0x9c, 0x58, 0x90, 0x99, 0xc4,
	0x06, 0x0e, 0x1d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x49, 0x7d, 0x29, 0x31, 0x01,
	0x00, 0x00,
}
