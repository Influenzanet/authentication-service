// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth-service-api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type JWTRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWTRequest) Reset()         { *m = JWTRequest{} }
func (m *JWTRequest) String() string { return proto.CompactTextString(m) }
func (*JWTRequest) ProtoMessage()    {}
func (*JWTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e86308594dc230, []int{0}
}

func (m *JWTRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTRequest.Unmarshal(m, b)
}
func (m *JWTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTRequest.Marshal(b, m, deterministic)
}
func (m *JWTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTRequest.Merge(m, src)
}
func (m *JWTRequest) XXX_Size() int {
	return xxx_messageInfo_JWTRequest.Size(m)
}
func (m *JWTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JWTRequest proto.InternalMessageInfo

func (m *JWTRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AppTokenRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppTokenRequest) Reset()         { *m = AppTokenRequest{} }
func (m *AppTokenRequest) String() string { return proto.CompactTextString(m) }
func (*AppTokenRequest) ProtoMessage()    {}
func (*AppTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e86308594dc230, []int{1}
}

func (m *AppTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppTokenRequest.Unmarshal(m, b)
}
func (m *AppTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppTokenRequest.Marshal(b, m, deterministic)
}
func (m *AppTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTokenRequest.Merge(m, src)
}
func (m *AppTokenRequest) XXX_Size() int {
	return xxx_messageInfo_AppTokenRequest.Size(m)
}
func (m *AppTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppTokenRequest proto.InternalMessageInfo

func (m *AppTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AppTokenValidation struct {
	Instances            []string `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppTokenValidation) Reset()         { *m = AppTokenValidation{} }
func (m *AppTokenValidation) String() string { return proto.CompactTextString(m) }
func (*AppTokenValidation) ProtoMessage()    {}
func (*AppTokenValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e86308594dc230, []int{2}
}

func (m *AppTokenValidation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppTokenValidation.Unmarshal(m, b)
}
func (m *AppTokenValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppTokenValidation.Marshal(b, m, deterministic)
}
func (m *AppTokenValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTokenValidation.Merge(m, src)
}
func (m *AppTokenValidation) XXX_Size() int {
	return xxx_messageInfo_AppTokenValidation.Size(m)
}
func (m *AppTokenValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTokenValidation.DiscardUnknown(m)
}

var xxx_messageInfo_AppTokenValidation proto.InternalMessageInfo

func (m *AppTokenValidation) GetInstances() []string {
	if m != nil {
		return m.Instances
	}
	return nil
}

type RefreshJWTRequest struct {
	RefreshToken         string   `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken          string   `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshJWTRequest) Reset()         { *m = RefreshJWTRequest{} }
func (m *RefreshJWTRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshJWTRequest) ProtoMessage()    {}
func (*RefreshJWTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e86308594dc230, []int{3}
}

func (m *RefreshJWTRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshJWTRequest.Unmarshal(m, b)
}
func (m *RefreshJWTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshJWTRequest.Marshal(b, m, deterministic)
}
func (m *RefreshJWTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshJWTRequest.Merge(m, src)
}
func (m *RefreshJWTRequest) XXX_Size() int {
	return xxx_messageInfo_RefreshJWTRequest.Size(m)
}
func (m *RefreshJWTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshJWTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshJWTRequest proto.InternalMessageInfo

func (m *RefreshJWTRequest) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *RefreshJWTRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type TempTokenInfo struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Expiration           int64    `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Purpose              string   `protobuf:"bytes,3,opt,name=purpose,proto3" json:"purpose,omitempty"`
	UserId               string   `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Info                 string   `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	InstanceId           string   `protobuf:"bytes,6,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TempTokenInfo) Reset()         { *m = TempTokenInfo{} }
func (m *TempTokenInfo) String() string { return proto.CompactTextString(m) }
func (*TempTokenInfo) ProtoMessage()    {}
func (*TempTokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e86308594dc230, []int{4}
}

func (m *TempTokenInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TempTokenInfo.Unmarshal(m, b)
}
func (m *TempTokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TempTokenInfo.Marshal(b, m, deterministic)
}
func (m *TempTokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TempTokenInfo.Merge(m, src)
}
func (m *TempTokenInfo) XXX_Size() int {
	return xxx_messageInfo_TempTokenInfo.Size(m)
}
func (m *TempTokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TempTokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TempTokenInfo proto.InternalMessageInfo

func (m *TempTokenInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TempTokenInfo) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *TempTokenInfo) GetPurpose() string {
	if m != nil {
		return m.Purpose
	}
	return ""
}

func (m *TempTokenInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *TempTokenInfo) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *TempTokenInfo) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type TempTokenInfos struct {
	TempTokens           []*TempTokenInfo `protobuf:"bytes,1,rep,name=temp_tokens,json=tempTokens,proto3" json:"temp_tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TempTokenInfos) Reset()         { *m = TempTokenInfos{} }
func (m *TempTokenInfos) String() string { return proto.CompactTextString(m) }
func (*TempTokenInfos) ProtoMessage()    {}
func (*TempTokenInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e86308594dc230, []int{5}
}

func (m *TempTokenInfos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TempTokenInfos.Unmarshal(m, b)
}
func (m *TempTokenInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TempTokenInfos.Marshal(b, m, deterministic)
}
func (m *TempTokenInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TempTokenInfos.Merge(m, src)
}
func (m *TempTokenInfos) XXX_Size() int {
	return xxx_messageInfo_TempTokenInfos.Size(m)
}
func (m *TempTokenInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_TempTokenInfos.DiscardUnknown(m)
}

var xxx_messageInfo_TempTokenInfos proto.InternalMessageInfo

func (m *TempTokenInfos) GetTempTokens() []*TempTokenInfo {
	if m != nil {
		return m.TempTokens
	}
	return nil
}

type TempToken struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TempToken) Reset()         { *m = TempToken{} }
func (m *TempToken) String() string { return proto.CompactTextString(m) }
func (*TempToken) ProtoMessage()    {}
func (*TempToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e86308594dc230, []int{6}
}

func (m *TempToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TempToken.Unmarshal(m, b)
}
func (m *TempToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TempToken.Marshal(b, m, deterministic)
}
func (m *TempToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TempToken.Merge(m, src)
}
func (m *TempToken) XXX_Size() int {
	return xxx_messageInfo_TempToken.Size(m)
}
func (m *TempToken) XXX_DiscardUnknown() {
	xxx_messageInfo_TempToken.DiscardUnknown(m)
}

var xxx_messageInfo_TempToken proto.InternalMessageInfo

func (m *TempToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type TokenResponse struct {
	AccessToken          string     `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken         string     `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	ExpiresIn            int32      `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	Profiles             []*Profile `protobuf:"bytes,4,rep,name=profiles,proto3" json:"profiles,omitempty"`
	SelectedProfileId    string     `protobuf:"bytes,5,opt,name=selected_profile_id,json=selectedProfileId,proto3" json:"selected_profile_id,omitempty"`
	PreferredLanguage    string     `protobuf:"bytes,6,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TokenResponse) Reset()         { *m = TokenResponse{} }
func (m *TokenResponse) String() string { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()    {}
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e86308594dc230, []int{7}
}

func (m *TokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenResponse.Unmarshal(m, b)
}
func (m *TokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenResponse.Marshal(b, m, deterministic)
}
func (m *TokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenResponse.Merge(m, src)
}
func (m *TokenResponse) XXX_Size() int {
	return xxx_messageInfo_TokenResponse.Size(m)
}
func (m *TokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenResponse proto.InternalMessageInfo

func (m *TokenResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *TokenResponse) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *TokenResponse) GetExpiresIn() int32 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

func (m *TokenResponse) GetProfiles() []*Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *TokenResponse) GetSelectedProfileId() string {
	if m != nil {
		return m.SelectedProfileId
	}
	return ""
}

func (m *TokenResponse) GetPreferredLanguage() string {
	if m != nil {
		return m.PreferredLanguage
	}
	return ""
}

func init() {
	proto.RegisterType((*JWTRequest)(nil), "inf.auth_service_api.JWTRequest")
	proto.RegisterType((*AppTokenRequest)(nil), "inf.auth_service_api.AppTokenRequest")
	proto.RegisterType((*AppTokenValidation)(nil), "inf.auth_service_api.AppTokenValidation")
	proto.RegisterType((*RefreshJWTRequest)(nil), "inf.auth_service_api.RefreshJWTRequest")
	proto.RegisterType((*TempTokenInfo)(nil), "inf.auth_service_api.TempTokenInfo")
	proto.RegisterType((*TempTokenInfos)(nil), "inf.auth_service_api.TempTokenInfos")
	proto.RegisterType((*TempToken)(nil), "inf.auth_service_api.TempToken")
	proto.RegisterType((*TokenResponse)(nil), "inf.auth_service_api.TokenResponse")
}

func init() {
	proto.RegisterFile("auth-service-api.proto", fileDescriptor_e8e86308594dc230)
}

var fileDescriptor_e8e86308594dc230 = []byte{
	// 713 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x6d, 0x4f, 0x13, 0x41,
	0x10, 0x4e, 0x29, 0x2d, 0x74, 0x4a, 0xa9, 0x5d, 0x08, 0xd6, 0xf3, 0x85, 0x52, 0x34, 0x10, 0x4d,
	0x8f, 0x04, 0xbf, 0x9a, 0x28, 0x06, 0x42, 0x4a, 0x30, 0x21, 0xd7, 0x0a, 0x8a, 0x31, 0xcd, 0xd2,
	0x4e, 0xaf, 0x1b, 0xaf, 0x7b, 0xeb, 0xed, 0x9e, 0xc8, 0x67, 0x7f, 0x82, 0xbf, 0xc3, 0xff, 0x68,
	0x6e, 0x6f, 0xaf, 0x2f, 0xb4, 0x85, 0xf2, 0xed, 0xf6, 0x99, 0x67, 0x76, 0x9e, 0x7d, 0xe6, 0x66,
	0x60, 0x83, 0x86, 0xaa, 0x57, 0x93, 0x18, 0xfc, 0x62, 0x6d, 0xac, 0x51, 0xc1, 0x6c, 0x11, 0xf8,
	0xca, 0x27, 0xeb, 0x8c, 0x77, 0xed, 0x28, 0xd6, 0x32, 0xb1, 0x16, 0x15, 0xcc, 0x22, 0xae, 0xe7,
	0x5f, 0x51, 0xaf, 0xa6, 0x6e, 0x04, 0xca, 0x98, 0x69, 0x3d, 0x75, 0x7d, 0xdf, 0xf5, 0x70, 0x4f,
	0x9f, 0xae, 0xc2, 0xee, 0x1e, 0xf6, 0x85, 0xba, 0x31, 0xc1, 0x27, 0xa1, 0xc4, 0xa0, 0xd6, 0xa7,
	0x9c, 0xba, 0xd8, 0x47, 0xae, 0x86, 0x15, 0xaa, 0x55, 0x80, 0x93, 0x8b, 0xa6, 0x83, 0x3f, 0x43,
	0x94, 0x8a, 0xac, 0x43, 0x46, 0xf9, 0x3f, 0x90, 0x97, 0x53, 0x95, 0xd4, 0x6e, 0xce, 0x89, 0x0f,
	0xd5, 0x1d, 0x28, 0x1e, 0x08, 0xd1, 0x8c, 0xbe, 0xef, 0x26, 0xee, 0x03, 0x49, 0x88, 0xe7, 0xd4,
	0x63, 0x1d, 0xaa, 0x98, 0xcf, 0xc9, 0x33, 0xc8, 0x31, 0x2e, 0x15, 0xe5, 0x6d, 0x94, 0xe5, 0x54,
	0x25, 0xbd, 0x9b, 0x73, 0x86, 0x40, 0xf5, 0x1b, 0x94, 0x1c, 0xec, 0x06, 0x28, 0x7b, 0x23, 0x3a,
	0xb6, 0xa1, 0x10, 0xc4, 0x60, 0x6b, 0xb4, 0xcc, 0x8a, 0x01, 0x75, 0x05, 0xb2, 0x05, 0x2b, 0xb4,
	0xdd, 0x46, 0x29, 0x0d, 0x67, 0x41, 0x73, 0xf2, 0x31, 0xa6, 0x29, 0xd5, 0x7f, 0x29, 0x28, 0x34,
	0xb1, 0x1f, 0x4b, 0xaa, 0xf3, 0xae, 0x3f, 0x5d, 0x38, 0x79, 0x01, 0x80, 0xbf, 0x05, 0x0b, 0xb4,
	0x60, 0x7d, 0x51, 0xda, 0x19, 0x41, 0x48, 0x19, 0x96, 0x44, 0x18, 0x08, 0x5f, 0x62, 0x39, 0xad,
	0xf3, 0x92, 0x23, 0x79, 0x0c, 0x4b, 0x91, 0xb9, 0x2d, 0xd6, 0x29, 0x2f, 0xea, 0x48, 0x36, 0x3a,
	0xd6, 0x3b, 0x84, 0xc0, 0x22, 0xe3, 0x5d, 0xbf, 0x9c, 0xd1, 0xa8, 0xfe, 0x26, 0x9b, 0x90, 0x4f,
	0x1e, 0x1e, 0x25, 0x64, 0x75, 0x08, 0x12, 0xa8, 0xde, 0xa9, 0x9e, 0xc3, 0xea, 0x98, 0x5c, 0x49,
	0x0e, 0x21, 0xaf, 0xb0, 0x2f, 0xe2, 0x27, 0xc6, 0xf6, 0xe5, 0xf7, 0xb7, 0xed, 0x69, 0xff, 0x85,
	0x3d, 0x96, 0xea, 0x80, 0x4a, 0x8e, 0xb2, 0xba, 0x05, 0xb9, 0x41, 0x70, 0x46, 0xef, 0xfe, 0x2e,
	0x40, 0xc1, 0xb4, 0x58, 0x0a, 0x9f, 0x4b, 0x9c, 0xf0, 0x37, 0x35, 0xe1, 0xef, 0x64, 0x9f, 0x16,
	0xa6, 0xf4, 0xe9, 0xb9, 0x31, 0x17, 0x65, 0x8b, 0x71, 0xed, 0x5f, 0xc6, 0xc9, 0x19, 0xa4, 0xce,
	0xc9, 0x3b, 0x58, 0x16, 0x81, 0xdf, 0x65, 0x1e, 0xca, 0xf2, 0xa2, 0x7e, 0x5e, 0x45, 0x3f, 0x4f,
	0xdb, 0x3a, 0xfc, 0x67, 0xf5, 0x0b, 0xcf, 0x62, 0xa2, 0x33, 0xc8, 0x20, 0x36, 0xac, 0x49, 0xf4,
	0xb0, 0xad, 0xb0, 0xd3, 0x32, 0x60, 0x64, 0x6d, 0xec, 0x7a, 0x29, 0x09, 0x99, 0xbc, 0x7a, 0x87,
	0xd4, 0x80, 0x88, 0x00, 0xbb, 0x18, 0x04, 0xd8, 0x69, 0x79, 0x94, 0xbb, 0x21, 0x75, 0xd1, 0x74,
	0xa2, 0x34, 0x88, 0x9c, 0x9a, 0xc0, 0xfe, 0x9f, 0x65, 0x58, 0x3d, 0x08, 0x55, 0xaf, 0x11, 0xdb,
	0x7c, 0x20, 0x18, 0xa9, 0x41, 0xb6, 0xa1, 0xa8, 0x0a, 0x25, 0xd9, 0xb0, 0xe3, 0xa1, 0xb3, 0x93,
	0xa1, 0xb3, 0x8f, 0xa2, 0xa1, 0xb3, 0xf2, 0x5a, 0xbf, 0x21, 0x51, 0x58, 0x3d, 0xf5, 0x5d, 0xc6,
	0x2f, 0x98, 0xea, 0x1d, 0xf5, 0x29, 0xf3, 0xc8, 0xeb, 0x99, 0xcf, 0x1b, 0x27, 0x7e, 0x92, 0xae,
	0x35, 0xab, 0xd3, 0x63, 0x8d, 0x6a, 0x43, 0xb1, 0xc1, 0x5c, 0x1e, 0x8a, 0x61, 0x8d, 0x37, 0x33,
	0x6b, 0xdc, 0x62, 0xce, 0x5d, 0xe4, 0x3b, 0x14, 0x1a, 0xd7, 0x4c, 0xb5, 0x7b, 0xc6, 0x4b, 0xb2,
	0x73, 0x6f, 0x97, 0xe2, 0x61, 0x9e, 0xef, 0xfa, 0x0f, 0x90, 0x37, 0x2b, 0x03, 0x4f, 0x2e, 0x9a,
	0xa4, 0x32, 0x3d, 0x67, 0xb8, 0x22, 0xac, 0xa2, 0x66, 0x8c, 0x4c, 0xca, 0x17, 0x58, 0x76, 0x90,
	0xe3, 0x75, 0x94, 0xbe, 0x33, 0x3d, 0x7d, 0x62, 0xd1, 0xcc, 0xeb, 0xef, 0xa3, 0x44, 0x5b, 0xb2,
	0xde, 0xc8, 0xab, 0xe9, 0x89, 0xb7, 0xf6, 0xa4, 0xb5, 0x7b, 0x37, 0x6d, 0x64, 0x4b, 0x7e, 0x85,
	0xd2, 0x31, 0x72, 0x0c, 0xa8, 0xc2, 0xe1, 0xa8, 0xce, 0x33, 0xe8, 0xd6, 0xe6, 0x3d, 0xa4, 0xe8,
	0xea, 0x44, 0xff, 0x10, 0xbc, 0x2f, 0xcb, 0x9a, 0xa7, 0x36, 0xb9, 0x84, 0xc2, 0x31, 0xaa, 0x01,
	0x26, 0xe7, 0x53, 0xfc, 0x72, 0x0e, 0x92, 0x24, 0xef, 0xa1, 0x78, 0x88, 0x1e, 0x3e, 0x48, 0xf4,
	0xd8, 0xe8, 0x1d, 0xc3, 0xda, 0x59, 0x18, 0xb8, 0xf8, 0x59, 0x62, 0xf0, 0x50, 0x89, 0xa3, 0x17,
	0x7d, 0xcc, 0x5c, 0xa6, 0xa9, 0x60, 0x57, 0x59, 0x3d, 0xe7, 0x6f, 0xff, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x4c, 0x64, 0x77, 0xfc, 0xae, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthServiceApiClient is the client API for AuthServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceApiClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error)
	// Auth:
	LoginWithEmail(ctx context.Context, in *LoginWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error)
	SignupWithEmail(ctx context.Context, in *SignupWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error)
	SwitchProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	// Token handling:
	ValidateJWT(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*TokenInfos, error)
	RenewJWT(ctx context.Context, in *RefreshJWTRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	// App token handling:
	ValidateAppToken(ctx context.Context, in *AppTokenRequest, opts ...grpc.CallOption) (*AppTokenValidation, error)
	// Temporary Tokens handling:
	GenerateTempToken(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempToken, error)
	ValidateTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*TempTokenInfo, error)
	GetTempTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempTokenInfos, error)
	DeleteTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*Status, error)
	PurgeUserTempTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*Status, error)
}

type authServiceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceApiClient(cc grpc.ClientConnInterface) AuthServiceApiClient {
	return &authServiceApiClient{cc}
}

func (c *authServiceApiClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) LoginWithEmail(ctx context.Context, in *LoginWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/LoginWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) SignupWithEmail(ctx context.Context, in *SignupWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/SignupWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) SwitchProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/SwitchProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) ValidateJWT(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*TokenInfos, error) {
	out := new(TokenInfos)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/ValidateJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) RenewJWT(ctx context.Context, in *RefreshJWTRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/RenewJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) ValidateAppToken(ctx context.Context, in *AppTokenRequest, opts ...grpc.CallOption) (*AppTokenValidation, error) {
	out := new(AppTokenValidation)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/ValidateAppToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) GenerateTempToken(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempToken, error) {
	out := new(TempToken)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/GenerateTempToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) ValidateTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*TempTokenInfo, error) {
	out := new(TempTokenInfo)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/ValidateTempToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) GetTempTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempTokenInfos, error) {
	out := new(TempTokenInfos)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/GetTempTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) DeleteTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/DeleteTempToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) PurgeUserTempTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/inf.auth_service_api.AuthServiceApi/PurgeUserTempTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceApiServer is the server API for AuthServiceApi service.
type AuthServiceApiServer interface {
	Status(context.Context, *empty.Empty) (*Status, error)
	// Auth:
	LoginWithEmail(context.Context, *LoginWithEmailMsg) (*TokenResponse, error)
	SignupWithEmail(context.Context, *SignupWithEmailMsg) (*TokenResponse, error)
	SwitchProfile(context.Context, *ProfileRequest) (*TokenResponse, error)
	// Token handling:
	ValidateJWT(context.Context, *JWTRequest) (*TokenInfos, error)
	RenewJWT(context.Context, *RefreshJWTRequest) (*TokenResponse, error)
	// App token handling:
	ValidateAppToken(context.Context, *AppTokenRequest) (*AppTokenValidation, error)
	// Temporary Tokens handling:
	GenerateTempToken(context.Context, *TempTokenInfo) (*TempToken, error)
	ValidateTempToken(context.Context, *TempToken) (*TempTokenInfo, error)
	GetTempTokens(context.Context, *TempTokenInfo) (*TempTokenInfos, error)
	DeleteTempToken(context.Context, *TempToken) (*Status, error)
	PurgeUserTempTokens(context.Context, *TempTokenInfo) (*Status, error)
}

// UnimplementedAuthServiceApiServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServiceApiServer struct {
}

func (*UnimplementedAuthServiceApiServer) Status(ctx context.Context, req *empty.Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedAuthServiceApiServer) LoginWithEmail(ctx context.Context, req *LoginWithEmailMsg) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithEmail not implemented")
}
func (*UnimplementedAuthServiceApiServer) SignupWithEmail(ctx context.Context, req *SignupWithEmailMsg) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupWithEmail not implemented")
}
func (*UnimplementedAuthServiceApiServer) SwitchProfile(ctx context.Context, req *ProfileRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchProfile not implemented")
}
func (*UnimplementedAuthServiceApiServer) ValidateJWT(ctx context.Context, req *JWTRequest) (*TokenInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateJWT not implemented")
}
func (*UnimplementedAuthServiceApiServer) RenewJWT(ctx context.Context, req *RefreshJWTRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewJWT not implemented")
}
func (*UnimplementedAuthServiceApiServer) ValidateAppToken(ctx context.Context, req *AppTokenRequest) (*AppTokenValidation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAppToken not implemented")
}
func (*UnimplementedAuthServiceApiServer) GenerateTempToken(ctx context.Context, req *TempTokenInfo) (*TempToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTempToken not implemented")
}
func (*UnimplementedAuthServiceApiServer) ValidateTempToken(ctx context.Context, req *TempToken) (*TempTokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTempToken not implemented")
}
func (*UnimplementedAuthServiceApiServer) GetTempTokens(ctx context.Context, req *TempTokenInfo) (*TempTokenInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTempTokens not implemented")
}
func (*UnimplementedAuthServiceApiServer) DeleteTempToken(ctx context.Context, req *TempToken) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTempToken not implemented")
}
func (*UnimplementedAuthServiceApiServer) PurgeUserTempTokens(ctx context.Context, req *TempTokenInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeUserTempTokens not implemented")
}

func RegisterAuthServiceApiServer(s *grpc.Server, srv AuthServiceApiServer) {
	s.RegisterService(&_AuthServiceApi_serviceDesc, srv)
}

func _AuthServiceApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_LoginWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithEmailMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).LoginWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/LoginWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).LoginWithEmail(ctx, req.(*LoginWithEmailMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_SignupWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupWithEmailMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).SignupWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/SignupWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).SignupWithEmail(ctx, req.(*SignupWithEmailMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_SwitchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).SwitchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/SwitchProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).SwitchProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_ValidateJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).ValidateJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/ValidateJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).ValidateJWT(ctx, req.(*JWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_RenewJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).RenewJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/RenewJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).RenewJWT(ctx, req.(*RefreshJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_ValidateAppToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).ValidateAppToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/ValidateAppToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).ValidateAppToken(ctx, req.(*AppTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_GenerateTempToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).GenerateTempToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/GenerateTempToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).GenerateTempToken(ctx, req.(*TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_ValidateTempToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).ValidateTempToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/ValidateTempToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).ValidateTempToken(ctx, req.(*TempToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_GetTempTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).GetTempTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/GetTempTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).GetTempTokens(ctx, req.(*TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_DeleteTempToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).DeleteTempToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/DeleteTempToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).DeleteTempToken(ctx, req.(*TempToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_PurgeUserTempTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).PurgeUserTempTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.auth_service_api.AuthServiceApi/PurgeUserTempTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).PurgeUserTempTokens(ctx, req.(*TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthServiceApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inf.auth_service_api.AuthServiceApi",
	HandlerType: (*AuthServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _AuthServiceApi_Status_Handler,
		},
		{
			MethodName: "LoginWithEmail",
			Handler:    _AuthServiceApi_LoginWithEmail_Handler,
		},
		{
			MethodName: "SignupWithEmail",
			Handler:    _AuthServiceApi_SignupWithEmail_Handler,
		},
		{
			MethodName: "SwitchProfile",
			Handler:    _AuthServiceApi_SwitchProfile_Handler,
		},
		{
			MethodName: "ValidateJWT",
			Handler:    _AuthServiceApi_ValidateJWT_Handler,
		},
		{
			MethodName: "RenewJWT",
			Handler:    _AuthServiceApi_RenewJWT_Handler,
		},
		{
			MethodName: "ValidateAppToken",
			Handler:    _AuthServiceApi_ValidateAppToken_Handler,
		},
		{
			MethodName: "GenerateTempToken",
			Handler:    _AuthServiceApi_GenerateTempToken_Handler,
		},
		{
			MethodName: "ValidateTempToken",
			Handler:    _AuthServiceApi_ValidateTempToken_Handler,
		},
		{
			MethodName: "GetTempTokens",
			Handler:    _AuthServiceApi_GetTempTokens_Handler,
		},
		{
			MethodName: "DeleteTempToken",
			Handler:    _AuthServiceApi_DeleteTempToken_Handler,
		},
		{
			MethodName: "PurgeUserTempTokens",
			Handler:    _AuthServiceApi_PurgeUserTempTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth-service-api.proto",
}
