// Code generated by protoc-gen-go. DO NOT EDIT.
// source: study-service-api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Study struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Study) Reset()         { *m = Study{} }
func (m *Study) String() string { return proto.CompactTextString(m) }
func (*Study) ProtoMessage()    {}
func (*Study) Descriptor() ([]byte, []int) {
	return fileDescriptor_81f0d8f98f9be15c, []int{0}
}

func (m *Study) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Study.Unmarshal(m, b)
}
func (m *Study) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Study.Marshal(b, m, deterministic)
}
func (m *Study) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Study.Merge(m, src)
}
func (m *Study) XXX_Size() int {
	return xxx_messageInfo_Study.Size(m)
}
func (m *Study) XXX_DiscardUnknown() {
	xxx_messageInfo_Study.DiscardUnknown(m)
}

var xxx_messageInfo_Study proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Study)(nil), "influenzanet.study_service_api.Study")
}

func init() { proto.RegisterFile("study-service-api.proto", fileDescriptor_81f0d8f98f9be15c) }

var fileDescriptor_81f0d8f98f9be15c = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x2e, 0x29, 0x4d,
	0xa9, 0xd4, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x4d, 0x2c, 0xc8, 0xd4, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x92, 0xcb, 0xcc, 0x4b, 0xcb, 0x29, 0x4d, 0xcd, 0xab, 0x4a, 0xcc, 0x4b,
	0x2d, 0xd1, 0x03, 0xab, 0x8a, 0x87, 0xaa, 0x8a, 0x4f, 0x2c, 0xc8, 0x94, 0x12, 0x4a, 0xcf, 0xc9,
	0x4f, 0x4a, 0xcc, 0xd1, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x86, 0xe8, 0x91, 0x92, 0x4e, 0xcf, 0xcf,
	0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xf3, 0x92, 0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0x21,
	0x92, 0x4a, 0xec, 0x5c, 0xac, 0xc1, 0x20, 0x53, 0x8c, 0x3c, 0xb9, 0xf8, 0xc1, 0x8c, 0x60, 0x88,
	0x69, 0x8e, 0x05, 0x99, 0x42, 0x66, 0x5c, 0x6c, 0xc1, 0x25, 0x89, 0x25, 0xa5, 0xc5, 0x42, 0x62,
	0x7a, 0x10, 0x33, 0xf4, 0x60, 0x66, 0xe8, 0xb9, 0x82, 0xcc, 0x90, 0x12, 0xd1, 0x43, 0x71, 0x0f,
	0x44, 0xb5, 0x13, 0x6b, 0x14, 0x73, 0x62, 0x41, 0x66, 0x12, 0x1b, 0x58, 0xb1, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0x7f, 0x82, 0xb8, 0xe3, 0xcd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StudyServiceApiClient is the client API for StudyServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StudyServiceApiClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error)
}

type studyServiceApiClient struct {
	cc *grpc.ClientConn
}

func NewStudyServiceApiClient(cc *grpc.ClientConn) StudyServiceApiClient {
	return &studyServiceApiClient{cc}
}

func (c *studyServiceApiClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service_api.StudyServiceApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyServiceApiServer is the server API for StudyServiceApi service.
type StudyServiceApiServer interface {
	Status(context.Context, *empty.Empty) (*Status, error)
}

// UnimplementedStudyServiceApiServer can be embedded to have forward compatible implementations.
type UnimplementedStudyServiceApiServer struct {
}

func (*UnimplementedStudyServiceApiServer) Status(ctx context.Context, req *empty.Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterStudyServiceApiServer(s *grpc.Server, srv StudyServiceApiServer) {
	s.RegisterService(&_StudyServiceApi_serviceDesc, srv)
}

func _StudyServiceApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service_api.StudyServiceApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudyServiceApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "influenzanet.study_service_api.StudyServiceApi",
	HandlerType: (*StudyServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _StudyServiceApi_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "study-service-api.proto",
}
