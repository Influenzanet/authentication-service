// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/user-management-api.pb.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	api "github.com/influenzanet/authentication-service/api"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockisContactInfo_Address is a mock of isContactInfo_Address interface
type MockisContactInfo_Address struct {
	ctrl     *gomock.Controller
	recorder *MockisContactInfo_AddressMockRecorder
}

// MockisContactInfo_AddressMockRecorder is the mock recorder for MockisContactInfo_Address
type MockisContactInfo_AddressMockRecorder struct {
	mock *MockisContactInfo_Address
}

// NewMockisContactInfo_Address creates a new mock instance
func NewMockisContactInfo_Address(ctrl *gomock.Controller) *MockisContactInfo_Address {
	mock := &MockisContactInfo_Address{ctrl: ctrl}
	mock.recorder = &MockisContactInfo_AddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisContactInfo_Address) EXPECT() *MockisContactInfo_AddressMockRecorder {
	return m.recorder
}

// isContactInfo_Address mocks base method
func (m *MockisContactInfo_Address) isContactInfo_Address() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isContactInfo_Address")
}

// isContactInfo_Address indicates an expected call of isContactInfo_Address
func (mr *MockisContactInfo_AddressMockRecorder) isContactInfo_Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isContactInfo_Address", reflect.TypeOf((*MockisContactInfo_Address)(nil).isContactInfo_Address))
}

// MockUserManagementApiClient is a mock of UserManagementApiClient interface
type MockUserManagementApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagementApiClientMockRecorder
}

// MockUserManagementApiClientMockRecorder is the mock recorder for MockUserManagementApiClient
type MockUserManagementApiClientMockRecorder struct {
	mock *MockUserManagementApiClient
}

// NewMockUserManagementApiClient creates a new mock instance
func NewMockUserManagementApiClient(ctrl *gomock.Controller) *MockUserManagementApiClient {
	mock := &MockUserManagementApiClient{ctrl: ctrl}
	mock.recorder = &MockUserManagementApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserManagementApiClient) EXPECT() *MockUserManagementApiClientMockRecorder {
	return m.recorder
}

// Status mocks base method
func (m *MockUserManagementApiClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*api.Status, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockUserManagementApiClientMockRecorder) Status(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockUserManagementApiClient)(nil).Status), varargs...)
}

// LoginWithEmail mocks base method
func (m *MockUserManagementApiClient) LoginWithEmail(ctx context.Context, in *api.LoginWithEmailMsg, opts ...grpc.CallOption) (*api.UserAuthInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginWithEmail", varargs...)
	ret0, _ := ret[0].(*api.UserAuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithEmail indicates an expected call of LoginWithEmail
func (mr *MockUserManagementApiClientMockRecorder) LoginWithEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithEmail", reflect.TypeOf((*MockUserManagementApiClient)(nil).LoginWithEmail), varargs...)
}

// SignupWithEmail mocks base method
func (m *MockUserManagementApiClient) SignupWithEmail(ctx context.Context, in *api.SignupWithEmailMsg, opts ...grpc.CallOption) (*api.UserAuthInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignupWithEmail", varargs...)
	ret0, _ := ret[0].(*api.UserAuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupWithEmail indicates an expected call of SignupWithEmail
func (mr *MockUserManagementApiClientMockRecorder) SignupWithEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupWithEmail", reflect.TypeOf((*MockUserManagementApiClient)(nil).SignupWithEmail), varargs...)
}

// CheckRefreshToken mocks base method
func (m *MockUserManagementApiClient) CheckRefreshToken(ctx context.Context, in *api.RefreshTokenRequest, opts ...grpc.CallOption) (*api.Status, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckRefreshToken", varargs...)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRefreshToken indicates an expected call of CheckRefreshToken
func (mr *MockUserManagementApiClientMockRecorder) CheckRefreshToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRefreshToken", reflect.TypeOf((*MockUserManagementApiClient)(nil).CheckRefreshToken), varargs...)
}

// TokenRefreshed mocks base method
func (m *MockUserManagementApiClient) TokenRefreshed(ctx context.Context, in *api.RefreshTokenRequest, opts ...grpc.CallOption) (*api.Status, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TokenRefreshed", varargs...)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenRefreshed indicates an expected call of TokenRefreshed
func (mr *MockUserManagementApiClientMockRecorder) TokenRefreshed(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenRefreshed", reflect.TypeOf((*MockUserManagementApiClient)(nil).TokenRefreshed), varargs...)
}

// SwitchProfile mocks base method
func (m *MockUserManagementApiClient) SwitchProfile(ctx context.Context, in *api.ProfileRequest, opts ...grpc.CallOption) (*api.UserAuthInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SwitchProfile", varargs...)
	ret0, _ := ret[0].(*api.UserAuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchProfile indicates an expected call of SwitchProfile
func (mr *MockUserManagementApiClientMockRecorder) SwitchProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchProfile", reflect.TypeOf((*MockUserManagementApiClient)(nil).SwitchProfile), varargs...)
}

// GetUser mocks base method
func (m *MockUserManagementApiClient) GetUser(ctx context.Context, in *api.UserReference, opts ...grpc.CallOption) (*api.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserManagementApiClientMockRecorder) GetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserManagementApiClient)(nil).GetUser), varargs...)
}

// ChangePassword mocks base method
func (m *MockUserManagementApiClient) ChangePassword(ctx context.Context, in *api.PasswordChangeMsg, opts ...grpc.CallOption) (*api.Status, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangePassword", varargs...)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockUserManagementApiClientMockRecorder) ChangePassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserManagementApiClient)(nil).ChangePassword), varargs...)
}

// ChangeAccountIDEmail mocks base method
func (m *MockUserManagementApiClient) ChangeAccountIDEmail(ctx context.Context, in *api.EmailChangeMsg, opts ...grpc.CallOption) (*api.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeAccountIDEmail", varargs...)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeAccountIDEmail indicates an expected call of ChangeAccountIDEmail
func (mr *MockUserManagementApiClientMockRecorder) ChangeAccountIDEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAccountIDEmail", reflect.TypeOf((*MockUserManagementApiClient)(nil).ChangeAccountIDEmail), varargs...)
}

// DeleteAccount mocks base method
func (m *MockUserManagementApiClient) DeleteAccount(ctx context.Context, in *api.UserReference, opts ...grpc.CallOption) (*api.Status, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccount", varargs...)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount
func (mr *MockUserManagementApiClientMockRecorder) DeleteAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockUserManagementApiClient)(nil).DeleteAccount), varargs...)
}

// ChangePreferredLanguage mocks base method
func (m *MockUserManagementApiClient) ChangePreferredLanguage(ctx context.Context, in *api.LanguageChangeMsg, opts ...grpc.CallOption) (*api.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangePreferredLanguage", varargs...)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePreferredLanguage indicates an expected call of ChangePreferredLanguage
func (mr *MockUserManagementApiClientMockRecorder) ChangePreferredLanguage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePreferredLanguage", reflect.TypeOf((*MockUserManagementApiClient)(nil).ChangePreferredLanguage), varargs...)
}

// SaveProfile mocks base method
func (m *MockUserManagementApiClient) SaveProfile(ctx context.Context, in *api.ProfileRequest, opts ...grpc.CallOption) (*api.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveProfile", varargs...)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProfile indicates an expected call of SaveProfile
func (mr *MockUserManagementApiClientMockRecorder) SaveProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProfile", reflect.TypeOf((*MockUserManagementApiClient)(nil).SaveProfile), varargs...)
}

// RemoveProfile mocks base method
func (m *MockUserManagementApiClient) RemoveProfile(ctx context.Context, in *api.ProfileRequest, opts ...grpc.CallOption) (*api.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveProfile", varargs...)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveProfile indicates an expected call of RemoveProfile
func (mr *MockUserManagementApiClientMockRecorder) RemoveProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProfile", reflect.TypeOf((*MockUserManagementApiClient)(nil).RemoveProfile), varargs...)
}

// UpdateContactPreferences mocks base method
func (m *MockUserManagementApiClient) UpdateContactPreferences(ctx context.Context, in *api.ContactPreferencesMsg, opts ...grpc.CallOption) (*api.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContactPreferences", varargs...)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactPreferences indicates an expected call of UpdateContactPreferences
func (mr *MockUserManagementApiClientMockRecorder) UpdateContactPreferences(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactPreferences", reflect.TypeOf((*MockUserManagementApiClient)(nil).UpdateContactPreferences), varargs...)
}

// AddEmail mocks base method
func (m *MockUserManagementApiClient) AddEmail(ctx context.Context, in *api.ContactInfoMsg, opts ...grpc.CallOption) (*api.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEmail", varargs...)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEmail indicates an expected call of AddEmail
func (mr *MockUserManagementApiClientMockRecorder) AddEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmail", reflect.TypeOf((*MockUserManagementApiClient)(nil).AddEmail), varargs...)
}

// RemoveEmail mocks base method
func (m *MockUserManagementApiClient) RemoveEmail(ctx context.Context, in *api.ContactInfoMsg, opts ...grpc.CallOption) (*api.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveEmail", varargs...)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveEmail indicates an expected call of RemoveEmail
func (mr *MockUserManagementApiClientMockRecorder) RemoveEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEmail", reflect.TypeOf((*MockUserManagementApiClient)(nil).RemoveEmail), varargs...)
}

// MockUserManagementApiServer is a mock of UserManagementApiServer interface
type MockUserManagementApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagementApiServerMockRecorder
}

// MockUserManagementApiServerMockRecorder is the mock recorder for MockUserManagementApiServer
type MockUserManagementApiServerMockRecorder struct {
	mock *MockUserManagementApiServer
}

// NewMockUserManagementApiServer creates a new mock instance
func NewMockUserManagementApiServer(ctrl *gomock.Controller) *MockUserManagementApiServer {
	mock := &MockUserManagementApiServer{ctrl: ctrl}
	mock.recorder = &MockUserManagementApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserManagementApiServer) EXPECT() *MockUserManagementApiServerMockRecorder {
	return m.recorder
}

// Status mocks base method
func (m *MockUserManagementApiServer) Status(arg0 context.Context, arg1 *empty.Empty) (*api.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockUserManagementApiServerMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockUserManagementApiServer)(nil).Status), arg0, arg1)
}

// LoginWithEmail mocks base method
func (m *MockUserManagementApiServer) LoginWithEmail(arg0 context.Context, arg1 *api.LoginWithEmailMsg) (*api.UserAuthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithEmail", arg0, arg1)
	ret0, _ := ret[0].(*api.UserAuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithEmail indicates an expected call of LoginWithEmail
func (mr *MockUserManagementApiServerMockRecorder) LoginWithEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithEmail", reflect.TypeOf((*MockUserManagementApiServer)(nil).LoginWithEmail), arg0, arg1)
}

// SignupWithEmail mocks base method
func (m *MockUserManagementApiServer) SignupWithEmail(arg0 context.Context, arg1 *api.SignupWithEmailMsg) (*api.UserAuthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignupWithEmail", arg0, arg1)
	ret0, _ := ret[0].(*api.UserAuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupWithEmail indicates an expected call of SignupWithEmail
func (mr *MockUserManagementApiServerMockRecorder) SignupWithEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupWithEmail", reflect.TypeOf((*MockUserManagementApiServer)(nil).SignupWithEmail), arg0, arg1)
}

// CheckRefreshToken mocks base method
func (m *MockUserManagementApiServer) CheckRefreshToken(arg0 context.Context, arg1 *api.RefreshTokenRequest) (*api.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRefreshToken indicates an expected call of CheckRefreshToken
func (mr *MockUserManagementApiServerMockRecorder) CheckRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRefreshToken", reflect.TypeOf((*MockUserManagementApiServer)(nil).CheckRefreshToken), arg0, arg1)
}

// TokenRefreshed mocks base method
func (m *MockUserManagementApiServer) TokenRefreshed(arg0 context.Context, arg1 *api.RefreshTokenRequest) (*api.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenRefreshed", arg0, arg1)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenRefreshed indicates an expected call of TokenRefreshed
func (mr *MockUserManagementApiServerMockRecorder) TokenRefreshed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenRefreshed", reflect.TypeOf((*MockUserManagementApiServer)(nil).TokenRefreshed), arg0, arg1)
}

// SwitchProfile mocks base method
func (m *MockUserManagementApiServer) SwitchProfile(arg0 context.Context, arg1 *api.ProfileRequest) (*api.UserAuthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchProfile", arg0, arg1)
	ret0, _ := ret[0].(*api.UserAuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchProfile indicates an expected call of SwitchProfile
func (mr *MockUserManagementApiServerMockRecorder) SwitchProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchProfile", reflect.TypeOf((*MockUserManagementApiServer)(nil).SwitchProfile), arg0, arg1)
}

// GetUser mocks base method
func (m *MockUserManagementApiServer) GetUser(arg0 context.Context, arg1 *api.UserReference) (*api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserManagementApiServerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserManagementApiServer)(nil).GetUser), arg0, arg1)
}

// ChangePassword mocks base method
func (m *MockUserManagementApiServer) ChangePassword(arg0 context.Context, arg1 *api.PasswordChangeMsg) (*api.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockUserManagementApiServerMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserManagementApiServer)(nil).ChangePassword), arg0, arg1)
}

// ChangeAccountIDEmail mocks base method
func (m *MockUserManagementApiServer) ChangeAccountIDEmail(arg0 context.Context, arg1 *api.EmailChangeMsg) (*api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAccountIDEmail", arg0, arg1)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeAccountIDEmail indicates an expected call of ChangeAccountIDEmail
func (mr *MockUserManagementApiServerMockRecorder) ChangeAccountIDEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAccountIDEmail", reflect.TypeOf((*MockUserManagementApiServer)(nil).ChangeAccountIDEmail), arg0, arg1)
}

// DeleteAccount mocks base method
func (m *MockUserManagementApiServer) DeleteAccount(arg0 context.Context, arg1 *api.UserReference) (*api.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount
func (mr *MockUserManagementApiServerMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockUserManagementApiServer)(nil).DeleteAccount), arg0, arg1)
}

// ChangePreferredLanguage mocks base method
func (m *MockUserManagementApiServer) ChangePreferredLanguage(arg0 context.Context, arg1 *api.LanguageChangeMsg) (*api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePreferredLanguage", arg0, arg1)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePreferredLanguage indicates an expected call of ChangePreferredLanguage
func (mr *MockUserManagementApiServerMockRecorder) ChangePreferredLanguage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePreferredLanguage", reflect.TypeOf((*MockUserManagementApiServer)(nil).ChangePreferredLanguage), arg0, arg1)
}

// SaveProfile mocks base method
func (m *MockUserManagementApiServer) SaveProfile(arg0 context.Context, arg1 *api.ProfileRequest) (*api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProfile", arg0, arg1)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProfile indicates an expected call of SaveProfile
func (mr *MockUserManagementApiServerMockRecorder) SaveProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProfile", reflect.TypeOf((*MockUserManagementApiServer)(nil).SaveProfile), arg0, arg1)
}

// RemoveProfile mocks base method
func (m *MockUserManagementApiServer) RemoveProfile(arg0 context.Context, arg1 *api.ProfileRequest) (*api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProfile", arg0, arg1)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveProfile indicates an expected call of RemoveProfile
func (mr *MockUserManagementApiServerMockRecorder) RemoveProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProfile", reflect.TypeOf((*MockUserManagementApiServer)(nil).RemoveProfile), arg0, arg1)
}

// UpdateContactPreferences mocks base method
func (m *MockUserManagementApiServer) UpdateContactPreferences(arg0 context.Context, arg1 *api.ContactPreferencesMsg) (*api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactPreferences", arg0, arg1)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactPreferences indicates an expected call of UpdateContactPreferences
func (mr *MockUserManagementApiServerMockRecorder) UpdateContactPreferences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactPreferences", reflect.TypeOf((*MockUserManagementApiServer)(nil).UpdateContactPreferences), arg0, arg1)
}

// AddEmail mocks base method
func (m *MockUserManagementApiServer) AddEmail(arg0 context.Context, arg1 *api.ContactInfoMsg) (*api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmail", arg0, arg1)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEmail indicates an expected call of AddEmail
func (mr *MockUserManagementApiServerMockRecorder) AddEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmail", reflect.TypeOf((*MockUserManagementApiServer)(nil).AddEmail), arg0, arg1)
}

// RemoveEmail mocks base method
func (m *MockUserManagementApiServer) RemoveEmail(arg0 context.Context, arg1 *api.ContactInfoMsg) (*api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEmail", arg0, arg1)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveEmail indicates an expected call of RemoveEmail
func (mr *MockUserManagementApiServerMockRecorder) RemoveEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEmail", reflect.TypeOf((*MockUserManagementApiServer)(nil).RemoveEmail), arg0, arg1)
}
